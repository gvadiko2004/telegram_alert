import os
import time
import requests

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

from telethon import TelegramClient, events

# ==============================
# üîë –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================

# === 2captcha –∫–ª—é—á ===
API_KEY_2CAPTCHA = "898059857fb8c709ca5c9613d44ffae4"  # üëâ —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–ª—é—á –æ—Ç 2captcha

# === –î–∞–Ω–Ω—ã–µ –¥–ª—è Telegram (–ø–æ–ª—É—á–∏—à—å –≤ my.telegram.org) ===
api_id = 21882740   # üëâ –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π api_id
api_hash = "c80a68894509d01a93f5acfeabfdd922"
phone = "+380634646075"  # üëâ —Å–≤–æ–π –Ω–æ–º–µ—Ä

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ Chrome ===
chrome_options = Options()
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--disable-blink-features=AutomationControlled")
chrome_options.add_argument("--headless")  # üëâ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

driver = webdriver.Chrome(service=Service("/usr/local/bin/chromedriver"), options=chrome_options)



# ==============================
# üîπ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–ü–ß–ï–ô
# ==============================

def solve_recaptcha_v2(sitekey, url):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 2captcha –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    """
    print("[INFO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 2captcha...")

    resp = requests.post(
        "http://2captcha.com/in.php",
        data={
            "key": API_KEY_2CAPTCHA,
            "method": "userrecaptcha",
            "googlekey": sitekey,   # sitekey –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            "pageurl": url,
            "json": 1
        }
    ).json()

    if resp["status"] != 1:
        print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:", resp)
        return None

    request_id = resp["request"]

    # –ñ–¥—ë–º —Ä–µ—à–µ–Ω–∏—è
    for i in range(20):
        time.sleep(5)
        res = requests.get(
            f"http://2captcha.com/res.php?key={API_KEY_2CAPTCHA}&action=get&id={request_id}&json=1"
        ).json()

        if res["status"] == 1:
            print("[INFO] –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞!")
            return res["request"]

    print("[ERROR] –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ!")
    return None


def bypass_captcha(site_url):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º sitekey –∫–∞–ø—á–∏ (–≤ HTML-–∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        sitekey = driver.find_element(By.CLASS_NAME, "g-recaptcha").get_attribute("data-sitekey")
        token = solve_recaptcha_v2(sitekey, site_url)

        if token:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ textarea reCAPTCHA
            driver.execute_script(
                f'document.getElementById("g-recaptcha-response").style.display="";'
                f'document.getElementById("g-recaptcha-response").value="{token}";'
            )
            print("[INFO] –¢–æ–∫–µ–Ω –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º—É")
        else:
            print("[ERROR] –ö–∞–ø—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞!")

    except Exception as e:
        print("[INFO] –ö–∞–ø—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞:", e)


# ==============================
# üîπ –õ–û–ì–ò–ö–ê –ë–û–¢–ê
# ==============================

# –ü—Ä–∏–º–µ—Ä: –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –∏ –æ–±—Ö–æ–¥–∏–º –∫–∞–ø—á—É
def open_site_and_login():
    url = "https://freelancehunt.com/ua/profile/login"  # üëâ —Å—é–¥–∞ —Å–≤–æ–π —Å–∞–π—Ç
    driver.get(url)

    try:
        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "login-form"))
        )
        print("[INFO] –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–∏–º–µ—Ä: –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
        driver.find_element(By.ID, "username").send_keys("–º–æ–π_–ª–æ–≥–∏–Ω")
        driver.find_element(By.ID, "password").send_keys("–º–æ–π_–ø–∞—Ä–æ–ª—å")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–ø—á–∞ ‚Äî —Ä–µ—à–∞–µ–º
        bypass_captcha(url)

        # –ñ–º—ë–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        driver.find_element(By.ID, "login-button").click()
        print("[INFO] –õ–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!")

    except TimeoutException:
        print("[ERROR] –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")


# ==============================
# üîπ TELEGRAM
# ==============================
client = TelegramClient("session_name", api_id, api_hash)

@client.on(events.NewMessage)
async def handler(event):
    text = event.message.message
    print(f"[TG] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if "#–∑–∞–π—Ç–∏" in text:
        open_site_and_login()
        await event.reply("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")


# ==============================
# üîπ –ó–ê–ü–£–°–ö
# ==============================
def main():
    print("[START] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    with client:
        client.run_until_disconnected()


if __name__ == "__main__":
    main()
